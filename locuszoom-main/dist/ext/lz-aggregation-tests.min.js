/*! Locuszoom 0.14.0 */
var LzAggregationTests;(()=>{"use strict";var e={d:(t,r)=>{for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{default:()=>o});const r=raremetal;function s(e){const t=e.Adapters.get("BaseLZAdapter");e.DataFunctions.add("gene_plus_aggregation",((e,[t,r])=>{const s={};return r.groups.forEach((function(e){Object.prototype.hasOwnProperty.call(s,e.group)||(s[e.group]=[]),s[e.group].push(e.pvalue)})),t.forEach((e=>{const t=e.gene_name,r=s[t];r&&(e.aggregation_best_pvalue=Math.min.apply(null,r))})),t})),e.Adapters.add("AggregationTestSourceLZ",class extends t{constructor(e){e.prefix_namespace=!1,super(e)}_buildRequestOptions(e){const{aggregation_tests:t={}}=e,{genoset_id:r=null,genoset_build:s=null,phenoset_build:o=null,pheno:n=null,calcs:a={},masks:u=[]}=t;return t.mask_ids=u.map((e=>e.name)),e.aggregation_tests=t,e}_getURL(e){return this._url}_getCacheKey(e){const{chr:t,start:r,end:s,aggregation_tests:o}=e,{genoset_id:n=null,genoset_build:a=null,phenoset_id:u=null,pheno:l=null,mask_ids:g}=o;return JSON.stringify({chrom:t,start:r,stop:s,genotypeDataset:n,phenotypeDataset:u,phenotype:l,samples:"ALL",genomeBuild:a,masks:g})}_performRequest(e){const t=this._getURL(e),r=this._getCacheKey(e);return fetch(t,{method:"POST",body:r,headers:{"Content-Type":"application/json"}}).then((e=>{if(!e.ok)throw new Error(e.statusText);return e.text()})).then((e=>{const t="string"==typeof e?JSON.parse(e):e;if(t.error)throw new Error(t.error);return t.data}))}_annotateRecords(e,t){const{aggregation_tests:s}=t,{calcs:o=[],mask_ids:n=[],masks:a=[]}=s;if(!e.groups)return{groups:[],variants:[]};e.groups=e.groups.filter((e=>"GENE"===e.groupType));const u=r.helpers.parsePortalJSON(e);let l=u[0];const g=u[1];if(l=l.byMask(n),!o||0===Object.keys(o).length)return{variants:[],groups:[],results:[]};return new r.helpers.PortalTestRunner(l,g,o).toJSON().then((function(e){const t=a.reduce(((e,t)=>(e[t.name]=t.description,e)),{});return e.data.groups.forEach((e=>{e.mask_name=t[e.mask]})),e.data})).catch((function(e){throw console.error(e),new Error("Failed to calculate aggregation test results")}))}}),e.Adapters.add("AssocFromAggregationLZ",class extends t{_buildRequestOptions(e,t){if(!t)throw new Error("Aggregation test results must be provided");return e._agg_results=t,e}_performRequest(e){return Promise.resolve(e._agg_results.variants)}_normalizeResponse(e){const t=new RegExp("(?:chr)?(.+):(\\d+)_?(\\w+)?/?([^_]+)?_?(.*)?");return e.map((e=>{const{variant:r,altFreq:s,pvalue:o}=e,n=r.match(t),[a,u,l,g]=n;return{variant:r,chromosome:u,position:+l,ref_allele:g,ref_allele_freq:1-s,log_pvalue:-Math.log10(o)}})).sort(((e,t)=>(e=e.variant)<(t=t.variant)?-1:e>t?1:0))}})}"undefined"!=typeof LocusZoom&&LocusZoom.use(s);const o=s;LzAggregationTests=t.default})();
//# sourceMappingURL=lz-aggregation-tests.min.js.map