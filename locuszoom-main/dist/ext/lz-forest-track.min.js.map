{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/external \"d3\"","webpack://[name]/./esm/ext/lz-forest-track.js"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","d3","install","LocusZoom","BaseDataLayer","DataLayers","default_layout","point_size","point_shape","color","fill_opacity","y_axis","axis","id_field","confidence_intervals","start_field","end_field","Forest","layout","Layouts","merge","super","arguments","tooltip","x_center","this","parent","x_scale","data","x_axis","field","y_scale","y_center","resolveScalableParameter","offset","Math","sqrt","PI","x_min","x_max","y_min","y_max","track_data","_applyFilters","ci_selection","svg","group","selectAll","d","ci_transform","x","y","isNaN","ci_width","scale","result","max","ci_height","enter","append","attr","getElementId","height","exit","remove","points_selection","initial_y","shape","size","i","type","shape_name","factory_name","charAt","toUpperCase","slice","on","element_data","emit","applyBehaviors","bind","add","axis_config","min","_getDataExtent","dimension","config","includes","Error","category_field","id","map","item","index","text","field_to_add","floor","ceiling","length","use"],"mappings":"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","file":"ext/lz-forest-track.min.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = d3;","/**\n * Forest plot track, designed for use with PheWAS style datasets.\n *   This is not part of the core LocusZoom library, but can be included as a standalone file.\n *\n * ### Features provided\n * * {@link module:LocusZoom_DataLayers~forest}\n * * {@link module:LocusZoom_DataLayers~category_forest}\n *\n * ### Loading and usage\n * The page must incorporate and load all libraries before this file can be used, including:\n * - LocusZoom\n *\n * To use in an environment without special JS build tooling, simply load the extension file as JS from a CDN (after any dependencies):\n * ```\n * <script src=\"https://cdn.jsdelivr.net/npm/locuszoom@INSERT_VERSION_HERE/dist/ext/lz-forest-track.min.js\" type=\"application/javascript\"></script>\n * ```\n *\n * To use with ES6 modules, the plugin must be loaded and registered explicitly before use:\n * ```\n * import LocusZoom from 'locuszoom';\n * import ForestTrack from 'locuszoom/esm/ext/lz-forest-track';\n * LocusZoom.use(ForestTrack);\n * ```\n *\n * Then use the layouts made available by this extension. (see demos and documentation for guidance)\n *\n * @module\n */\nimport * as d3 from 'd3';\n\n\nfunction install (LocusZoom) {\n    const BaseDataLayer = LocusZoom.DataLayers.get('BaseDataLayer');\n    const default_layout = {\n        point_size: 40,\n        point_shape: 'square',\n        color: '#888888',\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2,\n        },\n        id_field: 'id',\n        confidence_intervals: {\n            start_field: 'ci_start',\n            end_field: 'ci_end',\n        },\n    };\n\n    /**\n     * (**extension**) Forest Data Layer\n     * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n     *  and extent in advance.\n     *\n     * If you are using dynamically fetched data, consider using `category_forest` instead.\n     * @alias module:LocusZoom_DataLayers~forest\n     * @see module:LocusZoom_DataLayers~BaseDataLayer\n     * @see {@link module:ext/lz-forest-track} for required extension and installation instructions\n     */\n    class Forest extends BaseDataLayer {\n        /**\n         * @param {number|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.point_size=40] The size (area) of the point for each datum\n         * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.point_shape='square'] Shape of the point for each datum. Supported values map to the d3 SVG Symbol Types (i.e.: \"circle\", \"cross\", \"diamond\", \"square\", \"triangle\", \"star\", and \"wye\"), plus \"triangledown\".\n         * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color='#888888'] The color of each point\n         * @param {number|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.fill_opacity=1] Opacity (0..1) for each datum point\n         * @param {string} layout.x_axis.field A field specifying the x-coordinate of the mark (eg square)\n         * @param {string} layout.y_axis.field A field specifying the y-coordinate. Use `category_forest` if you just want to\n         *  lay out a series of forest markings in order without worrying about this.\n         * @param [layout.confidence_intervals.start_field='ci_start'] The field that specifies the start of confidence interval\n         * @param [layout.confidence_intervals.end_field='ci_end'] The field that specifies the start of confidence interval\n         */\n        constructor(layout) {\n            layout = LocusZoom.Layouts.merge(layout, default_layout);\n            super(...arguments);\n        }\n\n        _getTooltipPosition(tooltip) {\n            const x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n            const y_scale = `y${this.layout.y_axis.axis}_scale`;\n            const y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n\n            const point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n            const offset = Math.sqrt(point_size / Math.PI);\n            return {\n                x_min: x_center - offset,\n                x_max: x_center + offset,\n                y_min: y_center - offset,\n                y_max: y_center + offset,\n            };\n        }\n\n        /**\n         * @fires event:element_clicked\n         */\n        render() {\n            // Apply filters to only render a specified set of points\n            const track_data = this._applyFilters();\n\n            const x_scale = 'x_scale';\n            const y_scale = `y${this.layout.y_axis.axis}_scale`;\n\n            // Generate confidence interval paths if fields are defined\n            if (this.layout.confidence_intervals &&\n                this.layout.confidence_intervals.start_field &&\n                this.layout.confidence_intervals.end_field) {\n                // Generate a selection for all forest plot confidence intervals\n                const ci_selection = this.svg.group\n                    .selectAll('rect.lz-data_layer-forest.lz-data_layer-forest-ci')\n                    .data(track_data, (d) => {\n                        return d[this.layout.id_field];\n                    });\n\n                const ci_transform = (d) => {\n                    let x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                    let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                    if (isNaN(x)) {\n                        x = -1000;\n                    }\n                    if (isNaN(y)) {\n                        y = -1000;\n                    }\n                    return `translate(${x}, ${y})`;\n                };\n                const ci_width = (d) => {\n                    const {start_field, end_field} = this.layout.confidence_intervals;\n                    const scale = this.parent[x_scale];\n                    const result =  scale(d[end_field]) - scale(d[start_field]);\n                    return Math.max(result, 1);\n                };\n                const ci_height = 1;\n                // Create confidence interval rect elements\n                ci_selection.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-forest lz-data_layer-forest-ci')\n                    .attr('id', (d) => `${this.getElementId(d)}_ci`)\n                    .attr('transform', `translate(0, ${isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height})`)\n                    .merge(ci_selection)\n                    .attr('transform', ci_transform)\n                    .attr('width', ci_width) // Math.max(ci_width, 1))\n                    .attr('height', ci_height);\n\n                // Remove old elements as needed\n                ci_selection.exit()\n                    .remove();\n            }\n\n            // Generate a selection for all forest plot points\n            const points_selection = this.svg.group\n                .selectAll('path.lz-data_layer-forest.lz-data_layer-forest-point')\n                .data(track_data, (d) => {\n                    return d[this.layout.id_field];\n                });\n\n            // Create elements, apply class, ID, and initial position\n            const initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n\n            // Generate new values (or functions for them) for position, color, size, and shape\n            const transform = (d) => {\n                let x = this.parent[x_scale](d[this.layout.x_axis.field]);\n                let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)) {\n                    x = -1000;\n                }\n                if (isNaN(y)) {\n                    y = -1000;\n                }\n                return `translate(${x}, ${y})`;\n            };\n\n            const fill = (d, i) => this.resolveScalableParameter(this.layout.color, d, i);\n            const fill_opacity = (d, i) => this.resolveScalableParameter(this.layout.fill_opacity, d, i);\n\n            const shape = d3.symbol()\n                .size((d, i) => this.resolveScalableParameter(this.layout.point_size, d, i))\n                .type((d, i) => {\n                    // Legend shape names are strings; need to connect this to factory. Eg circle --> d3.symbolCircle\n                    const shape_name = this.resolveScalableParameter(this.layout.point_shape, d, i);\n                    const factory_name = `symbol${shape_name.charAt(0).toUpperCase() + shape_name.slice(1)}`;\n                    return d3[factory_name] || null;\n                });\n\n            points_selection.enter()\n                .append('path')\n                .attr('class', 'lz-data_layer-forest lz-data_layer-forest-point')\n                .attr('id', (d) => this.getElementId(d))\n                .attr('transform', `translate(0, ${initial_y})`)\n                .merge(points_selection)\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n\n            // Remove old elements as needed\n            points_selection.exit()\n                .remove();\n\n            // Apply behaviors to points\n            this.svg.group\n                .on('click.event_emitter', (element_data) => {\n                    this.parent.emit('element_clicked', element_data, true);\n                }).call(this.applyBehaviors.bind(this));\n        }\n    }\n\n    /**\n     * (**extension**) A y-aligned forest plot in which the y-axis represents item labels, which are dynamically\n     *   chosen when data is loaded. Each item is assumed to include both data and confidence intervals.\n     *   This allows generating forest plots without defining the layout in advance.\n     * @alias module:LocusZoom_DataLayers~category_forest\n     * @see module:LocusZoom_DataLayers~BaseDataLayer\n     * @see {@link module:ext/lz-forest-track} for required extension and installation instructions\n     */\n    class CategoryForest extends Forest {\n        _getDataExtent(data, axis_config) {\n            // In a forest plot, the data range is determined by *three* fields (beta + CI start/end)\n            const { confidence_intervals } = this.layout;\n            if (confidence_intervals && confidence_intervals.start_field && confidence_intervals.end_field) {\n                const min = (d) => +d[confidence_intervals.start_field];\n                const max = (d) => +d[confidence_intervals.end_field];\n                return [d3.min(data, min), d3.max(data, max)];\n            }\n\n            // If there are no confidence intervals set, then range must depend only on a single field\n            return super._getDataExtent(data, axis_config);\n        }\n\n        getTicks(dimension, config) { // Overrides parent method\n            if (!['x', 'y1', 'y2'].includes(dimension)) {\n                throw new Error(`Invalid dimension identifier ${dimension}`);\n            }\n\n            // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n            // Also assumes that every tick gets assigned a unique matching label\n            const axis_num = this.layout.y_axis.axis;\n            if (dimension === (`y${axis_num}`)) {\n                const category_field = this.layout.y_axis.category_field;\n                if (!category_field) {\n                    throw new Error(`Layout for ${this.layout.id} must specify category_field`);\n                }\n\n                return this.data.map((item, index) => ({ y: index + 1, text: item[category_field] }));\n            } else {\n                return [];\n            }\n        }\n\n        applyCustomDataMethods () {\n            // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n            //  correct extents.\n            const field_to_add = this.layout.y_axis.field;\n            if (!field_to_add) {\n                throw new Error(`Layout for ${this.layout.id} must specify yaxis.field`);\n            }\n\n            this.data = this.data.map((item, index) => {\n                item[field_to_add] = index + 1;\n                return item;\n            });\n            // Update axis extents based on one label for every point (with a bit of padding above and below)\n            this.layout.y_axis.floor = 0;\n            this.layout.y_axis.ceiling = this.data.length + 1;\n            return this;\n        }\n    }\n\n    LocusZoom.DataLayers.add('forest', Forest);\n    LocusZoom.DataLayers.add('category_forest', CategoryForest);\n}\n\nif (typeof LocusZoom !== 'undefined') {\n    // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()\n    // eslint-disable-next-line no-undef\n    LocusZoom.use(install);\n}\n\nexport default install;\n"],"sourceRoot":""}