{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/external \"d3\"","webpack://[name]/./esm/helpers/layouts.js","webpack://[name]/./esm/ext/lz-widget-addons.js"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","d3","Math","sqrt","deepCopy","item","JSON","parse","stringify","STATUS_VERBS","STATUS_ADJECTIVES","STATUS_ANTIVERBS","install","LocusZoom","_Button","Widgets","_BaseWidget","covariates_model_tooltip","covariates_model_association","Layouts","html","covariates_model_plot","covariates_model_plot_toolbar","widgets","push","type","button_html","button_title","position","add","this","parent_plot","state","model","covariates","CovariatesModel","button","element_reference","plot","element","toHTML","toString","i","length","applyState","updateWidget","removeByIdx","idx","Error","splice","removeAll","update","menu","setColor","layout","color","setHtml","setTitle","setOnclick","populate","setPopulate","selector","inner_selector","append","table","forEach","covariate","row","attr","style","on","preUpdate","count","disable","show","parent_panel","_data_layer_ids_by_z_index","slice","reverse","id","data_layer","data_layers","name","statuses","status_adj","status_idx","indexOf","status_verb","onclick","highlight","_global_statuses","at_top","at_bottom","td","moveBack","moveForward","confirm","parent","removeDataLayer","use"],"mappings":"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","file":"ext/lz-widget-addons.min.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = d3;","/**\n * Utilities for modifying or working with layout objects\n * @module\n * @private\n */\nimport * as d3 from 'd3';\n\nimport {mutate, query} from './jsonpath';\n\nconst sqrt3 = Math.sqrt(3);\n// D3 v5 does not provide a triangle down symbol shape, but it is very useful for showing direction of effect.\n//  Modified from https://github.com/d3/d3-shape/blob/master/src/symbol/triangle.js\nconst triangledown = {\n    draw(context, size) {\n        const y = -Math.sqrt(size / (sqrt3 * 3));\n        context.moveTo(0, -y * 2);\n        context.lineTo(-sqrt3 * y, y);\n        context.lineTo(sqrt3 * y, y);\n        context.closePath();\n    },\n};\n\n/**\n * Apply shared namespaces to a layout, recursively.\n *\n * Overriding namespaces can be used to identify where to retrieve data from, but not to add new data sources to a layout.\n *   For that, a key would have to be added to `layout.namespace` directly.\n *\n * Detail: This function is a bit magical. Whereas most layouts overrides are copied over verbatim (merging objects and nested keys), applyNamespaces will *only* copy\n *  over keys that are relevant to that data layer. Eg, if overrides specifies a key called \"red_herring\",\n *  an association data layer will ignore that data source entirely, and not copy it into `assoc_layer.namespace`.\n *\n * Only items under a key called `namespace` are given this special treatment. This allows a single call to `Layouts.get('plot'...)` to specify\n *   namespace overrides for many layers in one convenient place, without accidentally telling every layer to request all possible data for itself.\n * @private\n  */\nfunction applyNamespaces(layout, shared_namespaces) {\n    shared_namespaces = shared_namespaces || {};\n    if (!layout || typeof layout !== 'object' || typeof shared_namespaces !== 'object') {\n        throw new Error('Layout and shared namespaces must be provided as objects');\n    }\n\n    for (let [field_name, item] of Object.entries(layout)) {\n        if (field_name === 'namespace') {\n            Object.keys(item).forEach((requested_ns) => {\n                const override = shared_namespaces[requested_ns];\n                if (override) {\n                    item[requested_ns] = override;\n                }\n            });\n        } else if (item !== null && (typeof item === 'object')) {\n            layout[field_name] = applyNamespaces(item, shared_namespaces);\n        }\n    }\n    return layout;\n}\n\n/**\n * A helper method used for merging two objects. If a key is present in both, takes the value from the first object.\n *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n *\n * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n *\n * @alias LayoutRegistry.merge\n * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n * @param {object} default_layout An object containing default settings.\n * @returns {object} The custom layout is modified in place and also returned from this method.\n */\nfunction merge(custom_layout, default_layout) {\n    if (typeof custom_layout !== 'object' || typeof default_layout !== 'object') {\n        throw new Error(`LocusZoom.Layouts.merge only accepts two layout objects; ${typeof custom_layout}, ${typeof default_layout} given`);\n    }\n    for (let property in default_layout) {\n        if (!Object.prototype.hasOwnProperty.call(default_layout, property)) {\n            continue;\n        }\n        // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n        // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n        // Also separate arrays from objects as a discrete type.\n        let custom_type = custom_layout[property] === null ? 'undefined' : typeof custom_layout[property];\n        let default_type = typeof default_layout[property];\n        if (custom_type === 'object' && Array.isArray(custom_layout[property])) {\n            custom_type = 'array';\n        }\n        if (default_type === 'object' && Array.isArray(default_layout[property])) {\n            default_type = 'array';\n        }\n        // Unsupported property types: throw an exception\n        if (custom_type === 'function' || default_type === 'function') {\n            throw new Error('LocusZoom.Layouts.merge encountered an unsupported property type');\n        }\n        // Undefined custom value: pull the default value\n        if (custom_type === 'undefined') {\n            custom_layout[property] = deepCopy(default_layout[property]);\n            continue;\n        }\n        // Both values are objects: merge recursively\n        if (custom_type === 'object' && default_type === 'object') {\n            custom_layout[property] = merge(custom_layout[property], default_layout[property]);\n            continue;\n        }\n    }\n    return custom_layout;\n}\n\nfunction deepCopy(item) {\n    // FIXME: initial attempt to replace this with a more efficient deep clone method caused merge() to break; revisit in future.\n    //   Replacing this with a proper clone would be the key blocker to allowing functions and non-JSON values (like infinity) in layout objects\n    return JSON.parse(JSON.stringify(item));\n}\n\n/**\n * Convert name to symbol\n * Layout objects accept symbol names as strings (circle, triangle, etc). Convert to symbol objects.\n * @return {object|null} An object that implements a draw method (eg d3-shape symbols or extra LZ items)\n */\nfunction nameToSymbol(shape) {\n    if (!shape) {\n        return null;\n    }\n    if (shape === 'triangledown') {\n        // D3 does not provide this symbol natively\n        return triangledown;\n    }\n    // Legend shape names are strings; need to connect this to factory. Eg circle --> d3.symbolCircle\n    const factory_name = `symbol${shape.charAt(0).toUpperCase() + shape.slice(1)}`;\n    return d3[factory_name] || null;\n}\n\n\n/**\n * Find all references to namespaced fields within a layout object. This is used to validate that a set of provided\n *  data adapters will actually give all the information required to draw the plot.\n * @param {Object} layout\n * @param {Array|null} prefixes A list of allowed namespace prefixes. (used to differentiate between real fields,\n *   and random sentences that match an arbitrary pattern.\n * @param {RegExp|null} field_finder On recursive calls, pass the regexp we constructed the first time\n * @return {Set}\n */\nfunction findFields(layout, prefixes, field_finder = null) {\n    const fields = new Set();\n    if (!field_finder) {\n        if (!prefixes.length) {\n            // A layer that doesn't ask for external data does not need to check if the provider returns expected fields\n            return fields;\n        }\n        const all_ns = prefixes.join('|');\n\n        // Locates any reference within a template string to to `ns:field`, `{{ns:field}}`, or `{{#if ns:field}}`.\n        //  By knowing the list of allowed NS prefixes, we can be much more confident in avoiding spurious matches\n        field_finder = new RegExp(`(?:{{)?(?:#if *)?((?:${all_ns}):\\\\w+)`, 'g');\n    }\n\n    for (const value of Object.values(layout)) {\n        const value_type = typeof value;\n        let matches = [];\n        if (value_type === 'string') {\n            let a_match;\n            while ((a_match = field_finder.exec(value)) !== null) {\n                matches.push(a_match[1]);\n            }\n        } else if (value !== null && value_type === 'object') {\n            matches = findFields(value, prefixes, field_finder);\n        } else {\n            // Only look for field names in strings or compound values\n            continue;\n        }\n        for (let m of matches) {\n            fields.add(m);\n        }\n    }\n    return fields;\n}\n\n\n/**\n * A utility helper for customizing one part of a pre-made layout. Whenever a primitive value is found (eg string),\n *  replaces *exact match*\n *\n * This method works by comparing whether strings are a match. As a result, the \"old\" and \"new\" names must match\n *  whatever namespacing is used in the input layout.\n * Note: this utility *can* replace values with filters, but will not do so by default.\n *\n * @alias LayoutRegistry.renameField\n *\n * @param {object} layout The layout object to be transformed.\n * @param {string} old_name The old field name that will be replaced\n * @param {string} new_name The new field name that will be substituted in\n * @param {boolean} [warn_transforms=true] Sometimes, a field name is used with transforms appended, eg `label|htmlescape`.\n *   In some cases a rename could change the meaning of the field, and by default this method will print a warning to\n *   the console, encouraging the developer to check the relevant usages. This warning can be silenced via an optional function argument.\n */\nfunction renameField(layout, old_name, new_name, warn_transforms = true) {\n    const this_type = typeof layout;\n    // Handle nested types by recursion (in which case, `layout` may be something other than an object)\n    if (Array.isArray(layout)) {\n        return layout.map((item) => renameField(item, old_name, new_name, warn_transforms));\n    } else if (this_type === 'object' && layout !== null) {\n        return Object.keys(layout).reduce(\n            (acc, key) => {\n                acc[key] = renameField(layout[key], old_name, new_name, warn_transforms);\n                return acc;\n            }, {},\n        );\n    } else if (this_type !== 'string') {\n        // Field names are always strings. If the value isn't a string, don't even try to change it.\n        return layout;\n    } else {\n        // If we encounter a field we are trying to rename, then do so!\n        // Rules:\n        //  1. Try to avoid renaming part of a field, by checking token boundaries (field1 should not rename field1_displayvalue)\n        //  2. Warn the user if filter functions are being used with the specified field, so they can audit for changes in meaning\n        const escaped = old_name.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n        if (warn_transforms) {\n            // Warn the user that they might be renaming, eg, `pvalue|neg_log` to `log_pvalue|neg_log`. Let them decide\n            //   whether the new field name has a meaning that is compatible with the specified transforms.\n            const filter_regex = new RegExp(`${escaped}\\\\|\\\\w+`, 'g');\n            const filter_matches = (layout.match(filter_regex) || []);\n            filter_matches.forEach((match_val) => console.warn(`renameFields is renaming a field that uses transform functions: was '${match_val}' . Verify that these transforms are still appropriate.`));\n        }\n\n        // Find and replace any substring, so long as it is at the end of a valid token\n        const regex = new RegExp(`${escaped}(?!\\\\w+)`, 'g');\n        return layout.replace(regex, new_name);\n    }\n}\n\n/**\n * Modify any and all attributes at the specified path in the object\n * @param {object} layout The layout object to be mutated\n * @param {string} selector The JSONPath-compliant selector string specifying which field(s) to change.\n *   The callback will be applied to ALL matching selectors\n *  (see Interactivity guide for syntax and limitations)\n * @param {*|function} value_or_callable The new value, or a function that receives the old value and returns a new one\n * @returns {Array}\n * @alias LayoutRegistry.mutate_attrs\n */\nfunction mutate_attrs(layout, selector, value_or_callable) {\n    return mutate(\n        layout,\n        selector,\n        value_or_callable,\n    );\n}\n\n/**\n * Query any and all attributes at the specified path in the object.\n *      This is mostly only useful for debugging, to verify that a particular selector matches the intended field.\n * @param {object} layout The layout object to be mutated\n * @param {string} selector The JSONPath-compliant selector string specifying which values to return. (see Interactivity guide for limits)\n * @returns {Array}\n * @alias LayoutRegistry.query_attrs\n */\nfunction query_attrs(layout, selector) {\n    return query(layout, selector);\n}\n\nexport { applyNamespaces, deepCopy, merge, mutate_attrs, query_attrs, nameToSymbol, findFields, renameField };\n","/**\n * Optional LocusZoom extension: must be included separately, and after LocusZoom has been loaded\n *\n * This contains (reusable) code to power some (rarely used) demo features:\n *  - The \"covariates model\" demo, in which an LZ toolbar widget is populated\n *    with information by selecting points on the plot (see \"covariates model\" demo)\n *  - The \"data layers\" button, which allows fine control over multiple data layers shown in the same panel\n *    (show/hide, fade, change order, etc). This is powerful, but rarely used because showing many datasets in a small\n *    space makes data hard to see. (see \"multiple phenotypes layered\" demo)\n *\n * ### Loading and usage\n * The page must incorporate and load all libraries before this file can be used, including:\n * - LocusZoom\n *\n * To use in an environment without special JS build tooling, simply load the extension file as JS from a CDN (after any dependencies):\n *\n * ```javascript\n * <script src=\"https://cdn.jsdelivr.net/npm/locuszoom@INSERT_VERSION_HERE/dist/ext/lz-widget-addons.min.js\" type=\"application/javascript\"></script>\n * ```\n *\n * To use with ES6 modules, the plugin must be loaded and registered explicitly before use:\n * ```javascript\n * import LocusZoom from 'locuszoom';\n * import WidgetAddons from 'locuszoom/esm/ext/lz-widget-addons';\n * LocusZoom.use(WidgetAddons);\n * ```\n *\n * Then use the features made available by this extension. (see demos and documentation for guidance)\n *\n * @module\n */\nimport {deepCopy} from '../helpers/layouts';\n\n// In order to work in a UMD context, this module imports the top-level LocusZoom symbol\n\nconst STATUS_VERBS = ['highlight', 'select', 'fade', 'hide'];\nconst STATUS_ADJECTIVES = ['highlighted', 'selected', 'faded', 'hidden'];\nconst STATUS_ANTIVERBS = ['unhighlight', 'deselect', 'unfade', 'show'];\n\n\n// LocusZoom plugins work by exporting a function that receives the `LocusZoom` object\n// This allows them to work in many contexts (including script tags and ES6 imports)\nfunction install(LocusZoom) {\n    const _Button = LocusZoom.Widgets.get('_Button');\n    const _BaseWidget = LocusZoom.Widgets.get('BaseWidget');\n\n\n    /**\n     * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n     *   objects and store them in the special `model.covariates` field of plot `state`.\n     *\n     * This is a prototype widget for building a conditional analysis model, but it performs no calculation\n     *  functionality beyond building a list of items.\n     * @alias module:ext/lz-widget-addons~covariates_model\n     * @see module:LocusZoom_Widgets~BaseWidget\n     * @param {object} layout\n     * @param {string} layout.button_html The HTML to render inside the button\n     * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n     */\n    class CovariatesModel extends _BaseWidget {\n        initialize() {\n            // Initialize state.model.covariates\n            this.parent_plot.state.model = this.parent_plot.state.model || {};\n            this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n            // Create an object at the plot level for easy access to interface methods in custom client-side JS\n            /**\n             * When a covariates model toolbar element is present, create (one) object at the plot level that exposes\n             *   widget data and state for custom interactions with other plot elements.\n             */\n            this.parent_plot.CovariatesModel = {\n                /** @member {Button} */\n                button: this,\n                /**\n                 * Add an element to the model and show a representation of it in the toolbar widget menu. If the\n                 *   element is already part of the model, do nothing (to avoid adding duplicates).\n                 * When plot state is changed, this will automatically trigger requests for new data accordingly.\n                 * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n                 *   to create a serialized representation of itself.\n                 */\n                add: (element_reference) => {\n                    const plot = this.parent_plot;\n                    const element = deepCopy(element_reference);\n                    if (typeof element_reference == 'object' && typeof element.html != 'string') {\n                        element.html = ( (typeof element_reference.toHTML == 'function') ? element_reference.toHTML() : element_reference.toString());\n                    }\n                    // Check if the element is already in the model covariates array and return if it is.\n                    for (let i = 0; i < plot.state.model.covariates.length; i++) {\n                        if (JSON.stringify(plot.state.model.covariates[i]) === JSON.stringify(element)) {\n                            return plot;\n                        }\n                    }\n                    plot.state.model.covariates.push(element);\n                    plot.applyState();\n                    plot.CovariatesModel.updateWidget();\n                    return plot;\n                },\n                /**\n                 * Remove an element from `state.model.covariates` (and from the toolbar widget menu's\n                 *  representation of the state model). When plot state is changed, this will automatically trigger\n                 *  requests for new data accordingly.\n                 * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n                 */\n                removeByIdx: (idx) => {\n                    const plot = this.parent_plot;\n                    if (typeof plot.state.model.covariates[idx] == 'undefined') {\n                        throw new Error(`Unable to remove model covariate, invalid index: ${idx.toString()}`);\n                    }\n                    plot.state.model.covariates.splice(idx, 1);\n                    plot.applyState();\n                    plot.CovariatesModel.updateWidget();\n                    return plot;\n                },\n                /**\n                 * Empty the `state.model.covariates` array (and toolbar widget menu representation thereof) of all\n                 *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n                 */\n                removeAll: () => {\n                    const plot = this.parent_plot;\n                    plot.state.model.covariates = [];\n                    plot.applyState();\n                    plot.CovariatesModel.updateWidget();\n                    return plot;\n                },\n                /**\n                 * Manually trigger the update methods on the toolbar widget's button and menu elements to force\n                 *   display of most up-to-date content. Can be used to force the toolbar to reflect changes made, eg if\n                 *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n                 */\n                updateWidget: () => {\n                    this.button.update();\n                    this.button.menu.update();\n                },\n            };\n        }\n\n        update() {\n\n            if (this.button) {\n                return this;\n            }\n\n            this.button = new _Button(this)\n                .setColor(this.layout.color)\n                .setHtml(this.layout.button_html)\n                .setTitle(this.layout.button_title)\n                .setOnclick(() => {\n                    this.button.menu.populate();\n                });\n\n            this.button.menu.setPopulate(() => {\n                const selector = this.button.menu.inner_selector;\n                selector.html('');\n                // General model HTML representation\n                if (typeof this.parent_plot.state.model.html != 'undefined') {\n                    selector.append('div').html(this.parent_plot.state.model.html);\n                }\n                // Model covariates table\n                if (!this.parent_plot.state.model.covariates.length) {\n                    selector.append('i').html('no covariates in model');\n                } else {\n                    selector.append('h5').html(`Model Covariates (${this.parent_plot.state.model.covariates.length})`);\n                    const table = selector.append('table');\n                    this.parent_plot.state.model.covariates.forEach((covariate, idx) => {\n                        const html = ((typeof covariate == 'object' && typeof covariate.html == 'string') ? covariate.html : covariate.toString());\n                        const row = table.append('tr');\n                        row.append('td').append('button')\n                            .attr('class', `lz-toolbar-button lz-toolbar-button-${this.layout.color}`)\n                            .style('margin-left', '0em')\n                            .on('click', () => this.parent_plot.CovariatesModel.removeByIdx(idx))\n                            .html('×');\n                        row.append('td')\n                            .html(html);\n                    });\n                    selector.append('button')\n                        .attr('class', `lz-toolbar-button lz-toolbar-button-${this.layout.color}`)\n                        .style('margin-left', '4px')\n                        .html('× Remove All Covariates')\n                        .on('click', () => this.parent_plot.CovariatesModel.removeAll());\n                }\n            });\n\n            this.button.preUpdate = () => {\n                let html = 'Model';\n                const count = this.parent_plot.state.model.covariates.length;\n                if (count) {\n                    const noun = count > 1 ? 'covariates' : 'covariate';\n                    html += ` (${count} ${noun})`;\n                }\n                this.button.setHtml(html).disable(false);\n            };\n\n            this.button.show();\n\n            return this;\n        }\n    }\n\n\n    /**\n     * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n     * @alias module:ext/lz-widget-addons~data_layers\n     * @see module:LocusZoom_Widgets~BaseWidget\n     */\n    class DataLayersWidget extends _BaseWidget {\n        update() {\n\n            if (typeof this.layout.button_html != 'string') {\n                this.layout.button_html = 'Data Layers';\n            }\n            if (typeof this.layout.button_title != 'string') {\n                this.layout.button_title = 'Manipulate Data Layers (sort, dim, show/hide, etc.)';\n            }\n\n            if (this.button) {\n                return this;\n            }\n\n            this.button = new _Button(this)\n                .setColor(this.layout.color)\n                .setHtml(this.layout.button_html)\n                .setTitle(this.layout.button_title)\n                .setOnclick(() => {\n                    this.button.menu.populate();\n                });\n\n            this.button.menu.setPopulate(() => {\n                this.button.menu.inner_selector.html('');\n                const table = this.button.menu.inner_selector.append('table');\n                this.parent_panel._data_layer_ids_by_z_index.slice().reverse().forEach((id, idx) => {\n                    const data_layer = this.parent_panel.data_layers[id];\n                    const name = (typeof data_layer.layout.name != 'string') ? data_layer.id : data_layer.layout.name;\n                    const row = table.append('tr');\n                    // Layer name\n                    row.append('td').html(name);\n                    // Status toggle buttons\n                    this.layout.statuses.forEach((status_adj) => {\n                        const status_idx = STATUS_ADJECTIVES.indexOf(status_adj);\n                        const status_verb = STATUS_VERBS[status_idx];\n                        let html, onclick, highlight;\n                        if (data_layer._global_statuses[status_adj]) {\n                            html = STATUS_ANTIVERBS[status_idx];\n                            onclick = `un${status_verb}AllElements`;\n                            highlight = '-highlighted';\n                        } else {\n                            html = STATUS_VERBS[status_idx];\n                            onclick = `${status_verb}AllElements`;\n                            highlight = '';\n                        }\n                        row.append('td').append('a')\n                            .attr('class', `lz-toolbar-button lz-toolbar-button-${this.layout.color}${highlight}`)\n                            .style('margin-left', '0em')\n                            .on('click', () => {\n                                data_layer[onclick]();\n                                this.button.menu.populate();\n                            })\n                            .html(html);\n                    });\n                    // Sort layer buttons\n                    const at_top = (idx === 0);\n                    const at_bottom = (idx === (this.parent_panel._data_layer_ids_by_z_index.length - 1));\n                    const td = row.append('td');\n                    td.append('a')\n                        .attr('class', `lz-toolbar-button lz-toolbar-button-group-start lz-toolbar-button-${this.layout.color}${at_bottom ? '-disabled' : ''}`)\n                        .style('margin-left', '0em')\n                        .on('click', () => {\n                            data_layer.moveBack(); this.button.menu.populate();\n                        })\n                        .html('▾')\n                        .attr('title', 'Move layer down (further back)');\n                    td.append('a')\n                        .attr('class', `lz-toolbar-button lz-toolbar-button-group-middle lz-toolbar-button-${this.layout.color}${at_top ? '-disabled' : ''}`)\n                        .style('margin-left', '0em')\n                        .on('click', () => {\n                            data_layer.moveForward(); this.button.menu.populate();\n                        })\n                        .html('▴')\n                        .attr('title', 'Move layer up (further front)');\n                    td.append('a')\n                        .attr('class', 'lz-toolbar-button lz-toolbar-button-group-end lz-toolbar-button-red')\n                        .style('margin-left', '0em')\n                        .on('click', () => {\n                            if (confirm(`Are you sure you want to remove the ${name} layer? This cannot be undone.`)) {\n                                data_layer.parent.removeDataLayer(id);\n                            }\n                            return this.button.menu.populate();\n                        })\n                        .html('×')\n                        .attr('title', 'Remove layer');\n                });\n                return this;\n            });\n\n            this.button.show();\n\n            return this;\n        }\n    }\n\n    const covariates_model_tooltip = function () {\n        const covariates_model_association = LocusZoom.Layouts.get('tooltip', 'standard_association');\n        covariates_model_association.html += '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\">Condition on Variant</a><br>';\n        return covariates_model_association;\n    }();\n\n    const covariates_model_plot = function () {\n        const covariates_model_plot_toolbar = LocusZoom.Layouts.get('toolbar', 'standard_association');\n        covariates_model_plot_toolbar.widgets.push({\n            type: 'covariates_model',\n            button_html: 'Model',\n            button_title: 'Show and edit covariates currently in model',\n            position: 'left',\n        });\n        return covariates_model_plot_toolbar;\n    }();\n\n    LocusZoom.Widgets.add('covariates_model', CovariatesModel);\n    LocusZoom.Widgets.add('data_layers', DataLayersWidget);\n\n    LocusZoom.Layouts.add('tooltip', 'covariates_model_association', covariates_model_tooltip);\n    LocusZoom.Layouts.add('toolbar', 'covariates_model_plot', covariates_model_plot);\n}\n\nif (typeof LocusZoom !== 'undefined') {\n    // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()\n    // eslint-disable-next-line no-undef\n    LocusZoom.use(install);\n}\n\n\nexport default install;\n"],"sourceRoot":""}